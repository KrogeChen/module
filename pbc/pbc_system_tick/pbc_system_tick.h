#ifndef pbc_system_tick_H
#define pbc_system_tick_H
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#ifndef snail_data_types
    #include ".\depend\snail_data_types.h"
#endif
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//------------------------------------------------------------------------------
#define err_createTaskFail  0xff
//------------------------------------------------------------------------------
typedef void(*pTaskFun_def)(void);
//------------------------------------------------------------------------------
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//名称: 细节节拍和任务处理
//功能: 处理系统时钟节拍，调度任务
//入口: 无
//
//出口: 无
//------------------------------------------------------------------------------
void pbc_task_process(void);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//名称: 创建运行函数任务,最大支持8个任务
//功能: 
//入口: in_taskPointer   ---任务指针
//      sch_period      ---调度周期ms
//
//出口: 任务序号, 0 --7, err_createTaskFail  -- 创建任务失败
//------------------------------------------------------------------------------
sdt_int8u pbc_task_create(pTaskFun_def in_taskPointer,sdt_int16u sch_period);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//名称: 立即运行一个任务
//功能: 
//入口: in_taskPointer   ---任务指针
//
//出口:
//------------------------------------------------------------------------------
void pbc_taskImmediatelyRun(pTaskFun_def in_taskPointer);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//名称: 细节节拍和任务处理
//功能: 处理系统时钟节拍，调度任务
//入口: 无
//
//出口: 无
//------------------------------------------------------------------------------
void pbc_task_process(void);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#define timStatusBits_typeMask          0x0f

#define timStatusBits_typeMillsecond    0x00
#define timStatusBits_typeSecond        0x01
#define timStatusBits_typeMinute        0x02

#define timStatusBits_onceTriggered     0x80
//------------------------------------------------------------------------------
#define timerType_millisecond       timStatusBits_typeMillsecond
#define timerType_second            timStatusBits_typeSecond
#define timerType_minute            timStatusBits_typeMinute
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
typedef struct
{
    sdt_int8u  timStatusBits;
    sdt_int16u timClock;
    sdt_int16u keepTick;
}timerClock_def;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//name: 创建一个定时器
//宏定义.timerName--定时器名称,
//       timerType--定时器类型,timerType_millisecond,timerType_second,timerType_second
//       org_value--首次延时时间
//------------------------------------------------------------------------------
#define macro_createTimer(timerName,timerType,org_value)  static timerClock_def timerName={timerType,org_value,0};
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//name:获取当前系统节拍(ms)
//out: 系统节拍 ms
//------------------------------------------------------------------------------
sdt_int16u pbc_getSysTickMillisecond(void);
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//name:定时运行任务
//in:  定时器指针
//------------------------------------------------------------------------------
void pbc_timerClockRun_task(timerClock_def* in_timer);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//name:定时运行任务,ms运行,强制为ms类型
//in:  定时器指针
//------------------------------------------------------------------------------
void pbc_timerMillRun_task(timerClock_def* in_timer);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//名称: 获取定时器是否完成
//功能: 是否完成定时
//入口: 
//      in_timer  ---定时器指针
//
//出口: 是否完成定时, sdt_true--完成定时
//------------------------------------------------------------------------------
sdt_bool pbc_pull_timerIsCompleted(timerClock_def* in_timer);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//名称: 获取定时器是否完成一次触发
//功能: 是否完成一次定时
//入口: 
//      in_trigger_timer    ---触发型定时器指针
//
//出口: 是否完成定时, sdt_true--完成定时
//------------------------------------------------------------------------------
sdt_bool pbc_pull_timerIsOnceTriggered(timerClock_def* in_timer);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//名称: 停止触发检测
//功能: 触发一次的检测失效
//入口: 
//      in_trigger_timer    ---触发型定时器指针
//
//出口: 
//------------------------------------------------------------------------------
void pbc_stop_timerIsOnceTriggered(timerClock_def* in_timer);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//名称: 加载定时器定时时间
//功能: 定时器计时运行
//入口: 
//      in_timer  ---定时器指针
//      in_value  ---定时时间
//
//出口: 
//------------------------------------------------------------------------------
void pbc_reload_timerClock(timerClock_def* in_timer,sdt_int16u in_value);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/*
macro_createTimer(timer_xxx,timerType_millisecond,0);
pbc_timerClockRun_task(&timer_xxx);
if(pbc_pull_timerIsCompleted(&timer_xxx))
{
    pbc_reload_timerClock(&timer_xxx,1000);
}       
*/

#endif
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++